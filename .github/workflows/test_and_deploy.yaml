name: Test and Deploy CloudFormation Templates
on:
  workflow_call:
    inputs:
      aws_partition:
        description: 'The AWS partition in which the templates will be deployed'
        default: 'aws'
        required: false
        type: string
      job_type:
        description: The type of action being performed on the templates
        required: true
        type: string
      branch_type:
        description: >-
          The type of branch being assessed. Valid values are 'major' (deployment branch)
          or 'minor' (feature branch)
        required: false
        type: string
      github_secret_type:
        description: The type of secret containing the AWS account number (repository, environment, or organization)
        required: false
        type: string
      policy_as_code_provider:
        description: The software used for policy as code validations. Valid values are 'guard' (cfn-guard) or 'opa' (Open Policy Agent)
        required: false
        type: string
      account_secret_name:
        description: Name of the GitHub secret containing the AWS account number
        required: false
        type: string
      environment:
        description: Application environment associated with the target branch
        required: false
        type: string
      assumed_role_name:
        description: Path and name of the AWS IAM role assumed by the pipeline. Formatted as PATH/ROLE_NAME
        required: false
        type: string
      config_file_path:
        description: Path to the config file from the root of your GitHub repository
        required: false
        default: 'config'
        type: string
      deployment_folder_path:
        description: Path to the folder containing deployment artifacts
        required: false
        default: 'deployments'
        type: string
      aws_region:
        description: Main AWS region used to assume IAM role
        required: false
        default: 'us-east-1'
        type: string
    outputs:
      account_secret_name:
        description: Name of the GitHub secret containing the AWS account number
        value: ${{ jobs.Get_Config_Settings.outputs.account_secret_name }}
      branch_type:
        description: >-
          The type of branch being assessed. Valid values are 'major' (deployment branch)
          or 'minor' (feature branch)
        value: ${{ jobs.Get_Config_Settings.outputs.branch_type }}
      github_secret_type:
        description: The type of secret containing the AWS account number (repository, environment, or organization)
        value: ${{ jobs.Get_Config_Settings.outputs.github_secret_type }}
      policy_as_code_provider:
        description: The software used for policy as code validations. Valid values are 'guard' (cfn-guard) or 'opa' (Open Policy Agent)
        value: ${{ jobs.Get_Config_Settings.outputs.policy_as_code_provider }}
      environment:
        description: Application environment associated with the target branch
        value: ${{ jobs.Get_Config_Settings.outputs.environment }}
      assumed_role_name:
        description: Path and name of the AWS IAM role assumed by the pipeline. Formatted as PATH/ROLE_NAME
        value: ${{ jobs.Get_Config_Settings.outputs.assumed_role_name }}
    secrets:
      ACCOUNT_NUMBER:
        description: ID number of the target AWS account
        required: false

permissions:
  id-token: write
  contents: write

jobs:
  Get_Config_Settings:
    runs-on: ubuntu-latest
    if: inputs.job_type == 'setup'
    steps:
      - name: Get Config Settings
        id: config
        uses: tsamuel33/cloudformation-deployment-action@feature/local-testing
        with:
          job_type: setup
          config_file_path: ${{ inputs.config_file_path }}
    outputs:
          branch_type: ${{ steps.config.outputs.branch_type }}
          github_secret_type: ${{ steps.config.outputs.github_secret_type }}
          policy_as_code_provider: ${{ steps.config.outputs.policy_as_code_provider }}
          account_secret_name: ${{ steps.config.outputs.account_secret_name }}
          environment: ${{ steps.config.outputs.environment }}
          assumed_role_name: ${{ steps.config.outputs.assumed_role_name }}
  Check_Outputs:
    runs-on: ubuntu-latest
    if: inputs.job_type == 'validate'
    # env:
    #   SECRET_NAME: ${{ inputs.account_secret_name }}
    steps:
      - name: Checkout Output Values From Minor Branch
        shell: bash
        run: |
          echo "${{ inputs.branch_type }}"
          echo "${{ inputs.github_secret_type }}"
          echo "${{ inputs.policy_as_code_provider }}"
          echo "${{ inputs.account_secret_name }}"
          echo "${{ inputs.environment }}"
          echo "${{ inputs.assumed_role_name }}"
          echo "${{ inputs.config_file_path }}"
          echo "Secret value should be below and hopefully redacted"
          echo "${{ secrets.ACCOUNT_NUMBER }}"
  # Lint_Templates:
  #   runs-on: ubuntu-latest
  #   needs: Get_Config_Settings
  #   if: inputs.job_type == 'lint'
  #   steps:
  #     - name: Lint Templates
  #       uses: tsamuel33/cloudformation-deployment-action@feature/local-testing
  #       with:
  #         job_type: lint
  #         branch_type: ${{ needs.Get_Config_Settings.outputs.branch_type }}
  #         github_secret_type: ${{ needs.Get_Config_Settings.outputs.github_secret_type }}
  #         policy_as_code_provider: ${{ needs.Get_Config_Settings.outputs.policy_as_code_provider }}
  #         account_secret_name: ${{ needs.Get_Config_Settings.outputs.account_secret_name }}
  #         environment: ${{ needs.Get_Config_Settings.outputs.environment }}
  #         assumed_role_name: ${{ needs.Get_Config_Settings.outputs.assumed_role_name }}
  #         config_file_path: ${{ inputs.config_file_path }}
  # Policy_As_Code_Validation:
  #   runs-on: ubuntu-latest
  #   needs: Get_Config_Settings
  #   if: inputs.job_type == 'validate'
  #   environment: ${{ inputs.github_secret_type == 'environment' && needs.Get_Config_Settings.outputs.environment || null }}
  #   steps:
  #     - name: Validate Templates
  #       uses: tsamuel33/cloudformation-deployment-action@feature/local-testing
  #       with:
  #         job_type: validate
  #         aws_partition: ${{ inputs.aws_partition }}
  #         branch_type: ${{ needs.Get_Config_Settings.outputs.branch_type }}
  #         github_secret_type: ${{ needs.Get_Config_Settings.outputs.github_secret_type }}
  #         policy_as_code_provider: ${{ needs.Get_Config_Settings.outputs.policy_as_code_provider }}
  #         account_secret_name: ${{ needs.Get_Config_Settings.outputs.account_secret_name }}
  #         environment: ${{ needs.Get_Config_Settings.outputs.environment }}
  #         assumed_role_name: ${{ needs.Get_Config_Settings.outputs.assumed_role_name }}
  #         deployment_folder_path: ${{ inputs.deployment_folder_path }}
  #         config_file_path: ${{ inputs.config_file_path }}
  #         aws_account_number: ${{ secrets[needs.Get_Config_Settings.outputs.account_secret_name] }}
  # Deploy:
  #   runs-on: ubuntu-latest
  #   needs: Get_Config_Settings
  #   if: inputs.job_type == 'deploy'
  #   # environment:
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: Lint
  #       uses: ./.github/actions/cf-action
  #       with:
  #         job_type: deploy
  #         aws_partition: 'aws'
    # outputs:
    #   branch_type: ${{ steps.branch_type.outputs.branch_type }}
    #   github_secret_type: ${{ steps.secret_type.outputs.github_secret_type }}
    #   policy_as_code_provider: ${{ steps.validation_type.outputs.policy_as_code_provider }}
    #   account_secret_name: ${{ steps.secret_name.outputs.account_number_secret_name }}
    #   environment: ${{ steps.environment.outputs.environment }}
    #   assumed_role_name: ${{ steps.assumed_role_name.outputs.github_assumed_role_name }}
#   Test:
#     runs-on: ubuntu-latest
#     needs: SetConfigVariables
#     environment: ${{ needs.SetConfigVariables.outputs.github_secret_type == 'environment' && needs.SetConfigVariables.outputs.environment || null }}
#     env:
#       SECRET_NAME: ${{ needs.SetConfigVariables.outputs.account_secret_name }}
#       RUST_BACKTRACE: full
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3
#       - name: Install Linting Dependencies
#         run: |
#           echo "Installing cfn-lint, GitPython, and jsonpath-ng via pip..."
#           pip install cfn-lint GitPython jsonpath-ng --quiet
#       - name: Lint Templates
#         run: python -m scripts.deploy --branch ${{ github.ref_name }} --job lint
#       - name: Install cfn-guard
#         if: needs.SetConfigVariables.outputs.policy_as_code_provider == 'guard'
#         run: |
#           curl --proto ''=https'' --tlsv1.2 -sSf https://raw.githubusercontent.com/aws-cloudformation/cloudformation-guard/main/install-guard.sh | sh
#           GUARD_DIR=~/.guard/bin
#           echo $GUARD_DIR >> $GITHUB_PATH
#       - name: Install Open Policy Agent
#         if: needs.SetConfigVariables.outputs.policy_as_code_provider == 'opa'
#         run: |
#           curl -L -o opa https://openpolicyagent.org/downloads/v0.55.0/opa_linux_amd64_static
#           chmod 755 ./opa
#       - name: Configure AWS credentials
#         if: needs.SetConfigVariables.outputs.policy_as_code_provider != 'None' && needs.SetConfigVariables.outputs.branch_type == 'major'
#         uses: aws-actions/configure-aws-credentials@v1-node16
#         with:
#           role-to-assume: arn:aws:iam::${{ secrets[env.SECRET_NAME] }}:role/${{ env.ASSUMED_ROLE_NAME }}
#           role-session-name: GASession
#           aws-region: ${{ env.AWS_REGION }}
#         env:
#           AWS_REGION : "us-east-1"
#           SECRET_NAME: ${{ needs.SetConfigVariables.outputs.account_secret_name }}
#           ASSUMED_ROLE_NAME: ${{ needs.SetConfigVariables.outputs.assumed_role_name }}
#       - name: Policy as Code Validation
#         if: needs.SetConfigVariables.outputs.policy_as_code_provider != 'None'
#         run: python -m scripts.deploy --branch ${{ github.ref_name }} --account_number ${{ needs.SetConfigVariables.outputs.branch_type == 'major' && secrets[env.SECRET_NAME] || '123456789012' }} --job validate
#   Deploy:
#     runs-on: ubuntu-latest
#     needs: [SetConfigVariables, Test]
#     if: needs.SetConfigVariables.outputs.branch_type == 'major'
#     environment: ${{ needs.SetConfigVariables.outputs.github_secret_type == 'environment' && needs.SetConfigVariables.outputs.environment || null }}
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3
#       - name: Install Deployment Dependencies
#         run: |
#           echo "Installing boto3, GitPython, and jsonpath-ng via pip..."
#           pip install boto3 GitPython jsonpath-ng --quiet
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1-node16
#         with:
#           role-to-assume: arn:aws:iam::${{ secrets[env.SECRET_NAME] }}:role/${{ env.ASSUMED_ROLE_NAME }}
#           role-session-name: GASession
#           aws-region: ${{ env.AWS_REGION }}
#         env:
#           AWS_REGION : "us-east-1"
#           SECRET_NAME: ${{ needs.SetConfigVariables.outputs.account_secret_name }}
#           ASSUMED_ROLE_NAME: ${{ needs.SetConfigVariables.outputs.assumed_role_name }}
#       - name: Deploy Templates
#         env:
#           SECRET_NAME: ${{ needs.SetConfigVariables.outputs.account_secret_name }}
#         run: |
#           RESULT=$(python -m scripts.deploy --branch ${{ github.ref_name }} --account_number ${{ secrets[env.SECRET_NAME] }} --job deploy)
#           if [ $RESULT -ne 0 ]; then
#             echo "ERROR: See logs for details."
#             exit $RESULT
#           fi