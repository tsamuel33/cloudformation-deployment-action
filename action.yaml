name: CloudFormation Testing and Deployment
description: >-
  Action to lint, validate vs. policy as code (optional) and deploy
  CloudFormation templates

inputs:
  aws_partition:
    description: 'The AWS partition in which the templates will be deployed'
    default: 'aws'
    required: false
  job_type:
    description: The type of action being performed on the templates
    required: true
  branch_type:
    description: >-
      The type of branch being assessed. Valid values are 'major' (deployment branch)
      or 'minor' (feature branch)
    required: false
    default: ''
  github_secret_type:
    description: The type of secret containing the AWS account number (repository, environment, or organization)
    required: false
    default: ''
  policy_as_code_provider:
    description: The software used for policy as code validations. Valid values are 'guard' (cfn-guard) or 'opa' (Open Policy Agent)
    required: false
    default: ''
  account_secret_name:
    description: Name of the GitHub secret containing the AWS account number
    required: false
    default: ''
  environment:
    description: Application environment associated with the target branch
    required: false
    default: ''
  assumed_role_name:
    description: Path and name of the AWS IAM role assumed by the pipeline. Formatted as PATH/ROLE_NAME
    required: false
    default: ''
  config_path:
    description: Path to the config file from the root of your GitHub repository
    required: false
    default: 'config'
  aws_region:
    description: Main AWS region used to assume IAM role
    required: false
    default: 'us-east-1'

outputs:
  branch_type:
    description: >-
      The type of branch being assessed. Valid values are 'major' (deployment branch)
      or 'minor' (feature branch)
    value: ${{ steps.branch_type.outputs.branch_type }}
  github_secret_type:
    description: The type of secret containing the AWS account number (repository, environment, or organization)
    value: ${{ steps.secret_type.outputs.github_secret_type }}
  policy_as_code_provider:
    description: The software used for policy as code validations. Valid values are 'guard' (cfn-guard) or 'opa' (Open Policy Agent)
    value: ${{ steps.validation_type.outputs.policy_as_code_provider }}
  account_secret_name:
    description: Name of the GitHub secret containing the AWS account number
    value: ${{ steps.secret_name.outputs.account_number_secret_name }}
  environment:
    description: Application environment associated with the target branch
    value: ${{ steps.environment.outputs.environment }}
  assumed_role_name:
    description: Path and name of the AWS IAM role assumed by the pipeline. Formatted as PATH/ROLE_NAME
    value: ${{ steps.assumed_role_name.outputs.github_assumed_role_name }}

runs:
  using: composite
  steps:
    - name: Checkout Template Repo
      uses: actions/checkout@v3
      with:
        path: main
    - name: Checkout Action Repo
      uses: actions/checkout@v3
      with:
        repository: tsamuel33/cloudformation-deployment-action
        path: action
        token: ${{ github.token }}
    - name: Get Branch Type
      if: inputs.branch_type == '' || inputs.job_type == 'setup'
      working-directory: action
      id: branch_type
      shell: bash
      run: |
        SETTING=$(python -m scripts.env_setup --branch ${{ github.ref_name }} --github_env_var branch_type --config_file ${{ inputs.config_path }})
        echo "branch_type=${SETTING}" >> "$GITHUB_OUTPUT"
    - name: Get Environment
      if: inputs.environment == '' || inputs.job_type == 'setup'
      working-directory: action
      id: environment
      shell: bash
      run: |
        SETTING=$(python -m scripts.env_setup --branch ${{ github.ref_name }} --github_env_var environment --config_file ${{ inputs.config_path }})
        echo "environment=${SETTING}" >> "$GITHUB_OUTPUT"
    - name: Get Secret Type
      if: inputs.github_secret_type == '' || inputs.job_type == 'setup'
      working-directory: action
      id: secret_type
      shell: bash
      run: |
        SETTING=$(python -m scripts.env_setup --branch ${{ github.ref_name }} --github_env_var github_secret_type --config_file ${{ inputs.config_path }})
        echo "github_secret_type=${SETTING}" >> "$GITHUB_OUTPUT"
    - name: Get Validation Type
      if: inputs.policy_as_code_provider == '' || inputs.job_type == 'setup'
      working-directory: action
      id: validation_type
      shell: bash
      run: |
        SETTING=$(python -m scripts.env_setup --branch ${{ github.ref_name }} --github_env_var policy_as_code_provider --config_file ${{ inputs.config_path }})
        echo "policy_as_code_provider=${SETTING}" >> "$GITHUB_OUTPUT"
    - name: Get Secret Name
      if: inputs.account_secret_name == '' || inputs.job_type == 'setup'
      working-directory: action
      id: secret_name
      shell: bash
      run: |
        SETTING=$(python -m scripts.env_setup --branch ${{ github.ref_name }} --github_env_var account_number_secret_name --config_file ${{ inputs.config_path }})
        echo "account_number_secret_name=${SETTING}" >> "$GITHUB_OUTPUT"
    - name: Get Assumed Role Name
      if: inputs.assumed_role_name == '' || inputs.job_type == 'setup'
      working-directory: action
      id: assumed_role_name
      shell: bash
      run: |
        SETTING=$(python -m scripts.env_setup --branch ${{ github.ref_name }} --github_env_var github_assumed_role_name --config_file ${{ inputs.config_path }})
        echo "github_assumed_role_name=${SETTING}" >> "$GITHUB_OUTPUT"
    - name: Install Linting Dependencies
      if: inputs.job_type == 'lint'
      shell: bash
      run: |
        echo "Installing cfn-lint, GitPython, and jsonpath-ng via pip..."
        pip install cfn-lint GitPython jsonpath-ng --quiet
    - name: Lint Templates
      if: inputs.job_type == 'lint'
      working-directory: action
      shell: bash
      run: python -m scripts.deploy --branch ${{ github.ref_name }} --job lint --config_file ${{ inputs.config_path }}
    - name: Install cfn-guard
      if: inputs.job_type == 'validate' && inputs.policy_as_code_provider == 'guard'
      shell: bash
      run: |
        curl --proto ''=https'' --tlsv1.2 -sSf https://raw.githubusercontent.com/aws-cloudformation/cloudformation-guard/main/install-guard.sh | sh
        GUARD_DIR=~/.guard/bin
        echo $GUARD_DIR >> $GITHUB_PATH
    - name: Install Open Policy Agent
      if: inputs.job_type == 'validate' && inputs.policy_as_code_provider == 'opa'
      shell: bash
      run: |
        curl -L -o opa https://openpolicyagent.org/downloads/v0.55.0/opa_linux_amd64_static
        chmod 755 ./opa
    - name: Configure AWS credentials
      if: inputs.policy_as_code_provider != 'None' && inputs.branch_type == 'major'
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        role-to-assume: arn:${{ inputs.aws_partition }}:iam::${{ secrets[env.SECRET_NAME] }}:role/${{ env.ASSUMED_ROLE_NAME }}
        role-session-name: GADeployPipeline
        aws-region: ${{ env.AWS_REGION }}
      env:
        AWS_REGION : ${{ inputs.aws_region }}
        SECRET_NAME: ${{ inputs.account_secret_name }}
        ASSUMED_ROLE_NAME: ${{ inputs.assumed_role_name }}
    - name: Policy as Code Validation
      if: inputs.policy_as_code_provider != 'None'
      working-directory: action
      shell: bash
      env:
        SECRET_NAME: ${{ inputs.account_secret_name }}
      run: python -m scripts.deploy --branch ${{ github.ref_name }} --account_number ${{ inputs.branch_type == 'major' && secrets[env.SECRET_NAME] || '123456789012' }} --job validate

# jobs:
#   SetConfigVariables:
#     runs-on: ubuntu-latest
    
#     outputs:
#       branch_type: ${{ steps.branch_type.outputs.branch_type }}
#       github_secret_type: ${{ steps.secret_type.outputs.github_secret_type }}
#       policy_as_code_provider: ${{ steps.validation_type.outputs.policy_as_code_provider }}
#       account_secret_name: ${{ steps.secret_name.outputs.account_number_secret_name }}
#       environment: ${{ steps.environment.outputs.environment }}
#       assumed_role_name: ${{ steps.assumed_role_name.outputs.github_assumed_role_name }}
#   Test:
#     runs-on: ubuntu-latest
#     needs: SetConfigVariables
#     environment: ${{ needs.SetConfigVariables.outputs.github_secret_type == 'environment' && needs.SetConfigVariables.outputs.environment || null }}
#     env:
#       SECRET_NAME: ${{ needs.SetConfigVariables.outputs.account_secret_name }}
#     steps:
      
      # - name: Configure AWS credentials
      #   if: needs.SetConfigVariables.outputs.policy_as_code_provider != 'None' && needs.SetConfigVariables.outputs.branch_type == 'major'
      #   uses: aws-actions/configure-aws-credentials@v1-node16
      #   with:
      #     role-to-assume: arn:${{ inputs.aws_partition }}:iam::${{ secrets[env.SECRET_NAME] }}:role/${{ env.ASSUMED_ROLE_NAME }}
      #     role-session-name: GASession
      #     aws-region: ${{ env.AWS_REGION }}
      #   env:
      #     AWS_REGION : "us-east-1"
      #     SECRET_NAME: ${{ needs.SetConfigVariables.outputs.account_secret_name }}
      #     ASSUMED_ROLE_NAME: ${{ needs.SetConfigVariables.outputs.assumed_role_name }}
      # - name: Policy as Code Validation
      #   if: needs.SetConfigVariables.outputs.policy_as_code_provider != 'None'
      #   run: python -m scripts.deploy --branch ${{ github.ref_name }} --account_number ${{ needs.SetConfigVariables.outputs.branch_type == 'major' && secrets[env.SECRET_NAME] || '123456789012' }} --job validate
#   Deploy:
#     runs-on: ubuntu-latest
#     needs: [SetConfigVariables, Test]
#     if: needs.SetConfigVariables.outputs.branch_type == 'major'
#     environment: ${{ needs.SetConfigVariables.outputs.github_secret_type == 'environment' && needs.SetConfigVariables.outputs.environment || null }}
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3
#       - name: Install Deployment Dependencies
#         run: |
#           echo "Installing boto3, GitPython, and jsonpath-ng via pip..."
#           pip install boto3 GitPython jsonpath-ng --quiet
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1-node16
#         with:
#           role-to-assume: arn:${{ inputs.aws_partition }}:iam::${{ secrets[env.SECRET_NAME] }}:role/${{ env.ASSUMED_ROLE_NAME }}
#           role-session-name: GASession
#           aws-region: ${{ env.AWS_REGION }}
#         env:
#           AWS_REGION : "us-east-1"
#           SECRET_NAME: ${{ needs.SetConfigVariables.outputs.account_secret_name }}
#           ASSUMED_ROLE_NAME: ${{ needs.SetConfigVariables.outputs.assumed_role_name }}
#       - name: Deploy Templates
#         env:
#           SECRET_NAME: ${{ needs.SetConfigVariables.outputs.account_secret_name }}
#         run: |
#           RESULT=$(python -m scripts.deploy --branch ${{ github.ref_name }} --account_number ${{ secrets[env.SECRET_NAME] }} --job deploy)
#           if [ $RESULT -ne 0 ]; then
#             echo "ERROR: See logs for details."
#             exit $RESULT
#           fi