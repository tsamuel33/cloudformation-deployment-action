name: CloudFormation Testing and Deployment
description: >-
  Action to Lint, Validate vs. policy as code (optional) and deploy
  CloudFormation templates

inputs:
  aws_partition:
    description: 'The AWS partition in which the templates will be deployed'
    default: 'aws'
    required: false
  job_type:
    description: The type of action being performed on the templates
    required: true
  branch_type:
    description: >-
      The type of branch being assessed. Valid values are 'major' (deployment branch)
      or 'minor' (feature branch)
    required: false
    default: ''
  github_secret_type:
    description: The type of secret containing the AWS account number (repository, environment, or organization)
    required: false
    default: ''
  policy_as_code_provider:
    description: The software used for policy as code validations. Valid values are 'guard' (cfn-guard) or 'opa' (Open Policy Agent)
    required: false
    default: ''
  account_secret_name:
    description: Name of the GitHub secret containing the AWS account number
    required: false
    default: ''
  aws_account_number:
    description: ID number of the target AWS account
    required: false
    default: ''
  environment:
    description: Application environment associated with the target branch
    required: false
    default: ''
  assumed_role_name:
    description: Path and name of the AWS IAM role assumed by the pipeline. Formatted as PATH/ROLE_NAME
    required: false
    default: ''
  config_file_path:
    description: Path to the config file from the root of your GitHub repository
    required: false
    default: 'config'
  deployment_folder_path:
    description: Path to the folder containing deployment artifacts
    required: false
    default: 'deployments'
  aws_region:
    description: Main AWS region used to assume IAM role
    required: false
    default: 'us-east-1'
  rules_repo:
    description: GitHub repo containing your policy as code rules
    required: false
    default: ''
  rules_folder_path:
    description: Path to the folder containing your policy as code rules
    required: false
    default: ''

outputs:
  branch_type:
    description: >-
      The type of branch being assessed. Valid values are 'major' (deployment branch)
      or 'minor' (feature branch)
    value: ${{ steps.branch_type.outputs.branch_type }}
  github_secret_type:
    description: The type of secret containing the AWS account number (repository, environment, or organization)
    value: ${{ steps.secret_type.outputs.github_secret_type }}
  policy_as_code_provider:
    description: The software used for policy as code validations. Valid values are 'guard' (cfn-guard) or 'opa' (Open Policy Agent)
    value: ${{ steps.validation_type.outputs.policy_as_code_provider }}
  account_secret_name:
    description: Name of the GitHub secret containing the AWS account number
    value: ${{ steps.secret_name.outputs.account_number_secret_name }}
  environment:
    description: Application environment associated with the target branch
    value: ${{ steps.environment.outputs.environment }}
  assumed_role_name:
    description: Path and name of the AWS IAM role assumed by the pipeline. Formatted as PATH/ROLE_NAME
    value: ${{ steps.assumed_role_name.outputs.github_assumed_role_name }}

runs:
  using: composite
  steps:
    - name: Checkout Template Repo
      uses: actions/checkout@v3
      with:
        path: main
    - name: Checkout Action Repo
      uses: actions/checkout@v3
      with:
        repository: tsamuel33/cloudformation-deployment-action
        path: action
        token: ${{ github.token }}
    - name: Checkout Rules Repo
      if: inputs.rules_repo != '' && inputs.job_type == 'Validate'
      uses: actions/checkout@v3
      with:
        repository: ${{ inputs.rules_repo }}
        path: rules
        token: ${{ github.token }}
    - name: Get Branch Type
      if: inputs.branch_type == '' || inputs.job_type == 'Setup'
      working-directory: action
      id: branch_type
      shell: bash
      run: |
        SETTING=$(python -m scripts.env_setup --branch ${{ github.ref_name }} --github_env_var branch_type --config_file ${{ inputs.config_file_path }})
        echo "branch_type=${SETTING}" >> "$GITHUB_OUTPUT"
    - name: Get Environment
      if: inputs.environment == '' || inputs.job_type == 'Setup'
      working-directory: action
      id: environment
      shell: bash
      run: |
        SETTING=$(python -m scripts.env_setup --branch ${{ github.ref_name }} --github_env_var environment --config_file ${{ inputs.config_file_path }})
        echo "environment=${SETTING}" >> "$GITHUB_OUTPUT"
    - name: Get Secret Type
      if: inputs.github_secret_type == '' || inputs.job_type == 'Setup'
      working-directory: action
      id: secret_type
      shell: bash
      run: |
        SETTING=$(python -m scripts.env_setup --branch ${{ github.ref_name }} --github_env_var github_secret_type --config_file ${{ inputs.config_file_path }})
        echo "github_secret_type=${SETTING}" >> "$GITHUB_OUTPUT"
    - name: Get Validation Type
      if: inputs.policy_as_code_provider == '' || inputs.job_type == 'Setup'
      working-directory: action
      id: validation_type
      shell: bash
      run: |
        SETTING=$(python -m scripts.env_setup --branch ${{ github.ref_name }} --github_env_var policy_as_code_provider --config_file ${{ inputs.config_file_path }})
        echo "policy_as_code_provider=${SETTING}" >> "$GITHUB_OUTPUT"
    - name: Get Secret Name
      if: inputs.account_secret_name == '' || inputs.job_type == 'Setup'
      working-directory: action
      id: secret_name
      shell: bash
      run: |
        SETTING=$(python -m scripts.env_setup --branch ${{ github.ref_name }} --github_env_var account_number_secret_name --config_file ${{ inputs.config_file_path }})
        echo "account_number_secret_name=${SETTING}" >> "$GITHUB_OUTPUT"
    - name: Get Assumed Role Name
      if: inputs.assumed_role_name == '' || inputs.job_type == 'Setup'
      working-directory: action
      id: assumed_role_name
      shell: bash
      run: |
        SETTING=$(python -m scripts.env_setup --branch ${{ github.ref_name }} --github_env_var github_assumed_role_name --config_file ${{ inputs.config_file_path }})
        echo "github_assumed_role_name=${SETTING}" >> "$GITHUB_OUTPUT"
    - name: Install Linting/Validation Dependencies
      if: inputs.job_type != 'Setup'
      shell: bash
      run: |
        echo "Installing cfn-lint, GitPython, and jsonpath-ng via pip..."
        pip install cfn-lint GitPython jsonpath-ng --quiet
    - name: Lint Templates
      if: inputs.job_type == 'Lint'
      working-directory: action
      shell: bash
      run: python -m scripts.deploy --branch ${{ github.ref_name }} --job Lint --config_file ${{ inputs.config_file_path }} --deployment_folder ${{ inputs.deployment_folder_path }}
    - name: Install cfn-guard
      if: inputs.job_type == 'Validate' && inputs.policy_as_code_provider == 'guard'
      shell: bash
      run: |
        curl --proto ''=https'' --tlsv1.2 -sSf https://raw.githubusercontent.com/aws-cloudformation/cloudformation-guard/main/install-guard.sh | sh
        GUARD_DIR=~/.guard/bin
        echo $GUARD_DIR >> $GITHUB_PATH
    - name: Install Open Policy Agent
      if: inputs.job_type == 'Validate' && inputs.policy_as_code_provider == 'opa'
      shell: bash
      run: |
        curl -L -o opa https://openpolicyagent.org/downloads/v0.55.0/opa_linux_amd64_static
        chmod 755 ./opa
    - name: Configure AWS credentials
      if: inputs.branch_type == 'major'
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        role-to-assume: arn:${{ inputs.aws_partition }}:iam::${{ inputs.aws_account_number }}:role/${{ inputs.assumed_role_name }}
        role-session-name: GADeployPipeline
        aws-region: ${{ env.AWS_REGION }}
      env:
        AWS_REGION : ${{ inputs.aws_region }}
    - name: Policy as Code Validation
      if: inputs.policy_as_code_provider != 'None' && inputs.job_type == 'Validate'
      working-directory: action
      shell: bash
      run: |
        RESULT=$(python -m scripts.deploy --branch ${{ github.ref_name }} --account_number ${{ inputs.branch_type == 'major' && inputs.aws_account_number || '123456789012' }} --job Validate --config_file ${{ inputs.config_file_path }} --deployment_folder ${{ inputs.deployment_folder_path }} --rules_folder ${{ inputs.rules_folder_path }})
        if [ $RESULT -ne 0 ]; then
          echo "ERROR: See logs for details."
          exit $RESULT
        fi
    - name: Deploy Templates
      if: inputs.branch_type == 'major' && inputs.job_type == 'Deploy'
      working-directory: action
      shell: bash
      run: |
        RESULT=$(python -m scripts.deploy --branch ${{ github.ref_name }} --account_number ${{ inputs.aws_account_number }} --job Deploy --config_file ${{ inputs.config_file_path }} --deployment_folder ${{ inputs.deployment_folder_path }})
        if [ $RESULT -ne 0 ]; then
          echo "ERROR: See logs for details."
          exit $RESULT
        fi